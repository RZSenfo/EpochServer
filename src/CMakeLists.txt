CMAKE_MINIMUM_REQUIRED( VERSION 3.0 )


FILE( GLOB_RECURSE INTERCEPT_PLUGIN_SOURCES *.h *.hpp *.c *.cpp )
SOURCE_GROUP( "src" FILES ${INTERCEPT_PLUGIN_SOURCES} )

#include the Intercept headers from the submodule
SET( INTERCEPT_CLIENT_PATH "${CMAKE_SOURCE_DIR}/deps/intercept/src/client" )
SET( INTERCEPT_INCLUDE_PATH "${INTERCEPT_CLIENT_PATH}/headers" "${INTERCEPT_CLIENT_PATH}/headers/shared" "${INTERCEPT_CLIENT_PATH}/headers/client/" "${INTERCEPT_CLIENT_PATH}/headers/client/sqf" )

if(USE_64BIT_BUILD)
    SET( INTERCEPT_PLUGIN_NAME "${CMAKE_PROJECT_NAME}_x64" PARENT_SCOPE )
    SET( INTERCEPT_PLUGIN_NAME "${CMAKE_PROJECT_NAME}_x64" )
else()
    SET( INTERCEPT_PLUGIN_NAME "${CMAKE_PROJECT_NAME}" PARENT_SCOPE )
    SET( INTERCEPT_PLUGIN_NAME "${CMAKE_PROJECT_NAME}" )
endif()

ADD_DEFINITIONS( /DINTERCEPT_NO_THREAD_SAFETY )

if(USE_ENGINE_TYPES)
    ADD_DEFINITIONS( /DINTERCEPT_SQF_STRTYPE_RSTRING )
endif()

FILE( GLOB INTERCEPT_HOST_SOURCES "${INTERCEPT_CLIENT_PATH}/intercept/client/*.cpp" "${INTERCEPT_CLIENT_PATH}/intercept/client/sqf/*.cpp" "${INTERCEPT_CLIENT_PATH}/intercept/shared/*.cpp" )
SOURCE_GROUP( "intercept" FILES ${INTERCEPT_HOST_SOURCES} )

#glob external sources
if(WIN32)
    SET( INTERCEPT_PLUGIN_LIBS ws2_32 hiredis win32_interop shlwapi )
    if(USE_64BIT_BUILD)
        LINK_DIRECTORIES( "${PROJECT_SOURCE_DIR}/deps/hiredis/msvs/vs-solutions/vs2015/bin/x64/Release" )
    else()
        LINK_DIRECTORIES( "${PROJECT_SOURCE_DIR}/deps/hiredis/msvs/vs-solutions/vs2015/bin/x86/Release" )
    endif()
    INCLUDE_DIRECTORIES( "${PROJECT_SOURCE_DIR}/deps/hiredis" )
else()
    SET( INTERCEPT_PLUGIN_LIBS hiredis )
    INCLUDE_DIRECTORIES( "${PROJECT_SOURCE_DIR}/deps/hiredis-linux" )
    LINK_DIRECTORIES( "${PROJECT_SOURCE_DIR}/deps/hiredis-linux" )
endif()

FILE( GLOB SOURCES_HTTP "${PROJECT_SOURCE_DIR}/deps/happyhttp/*p.cpp" "${PROJECT_SOURCE_DIR}/deps/happyhttp/*.h" )
SOURCE_GROUP( "src" FILES ${SOURCES_HTTP} )
INCLUDE_DIRECTORIES( "${CMAKE_SOURCE_DIR}/deps/happyhttp" )

ADD_LIBRARY( ${INTERCEPT_PLUGIN_NAME} SHARED 
	${INTERCEPT_PLUGIN_SOURCES}
	${INTERCEPT_HOST_SOURCES}	
    ${SOURCES_HTTP} 
)

if(${WIN32})
    # Windows
    TARGET_LINK_LIBRARIES( ${INTERCEPT_PLUGIN_NAME} ${INTERCEPT_PLUGIN_LIBS} )
    ADD_DEFINITIONS( -DUNICODE -D_UNICODE -DWIN32_LEAN_AND_MEAN )
    SET_TARGET_PROPERTIES( ${INTERCEPT_PLUGIN_NAME} PROPERTIES LINK_FLAGS " /MANIFEST:NO /ERRORREPORT:NONE" )
else()
    # Linux
    TARGET_LINK_LIBRARIES( ${INTERCEPT_PLUGIN_NAME} -Wl,-Bstatic ${INTERCEPT_PLUGIN_LIBS} -Wl,-Bdynamic )
    SET( CMAKE_CXX_FLAGS "-static-libstdc++ -static-libgcc ${CMAKE_CXX_FLAGS}" )
endif()

TARGET_LINK_LIBRARIES( ${INTERCEPT_PLUGIN_NAME} mariadbclientpp yaml-cpp pcre )

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${INTERCEPT_INCLUDE_PATH} )

SET_TARGET_PROPERTIES( ${INTERCEPT_PLUGIN_NAME} PROPERTIES PREFIX "" )
SET_TARGET_PROPERTIES( ${INTERCEPT_PLUGIN_NAME} PROPERTIES FOLDER "${CMAKE_PROJECT_NAME}" )

if(CMAKE_COMPILER_IS_GNUCXX)
	SET( CMAKE_CXX_FLAGS "-std=c++1z -O2 -s -fPIC -fpermissive -static-libgcc -static-libstdc++ -march=i686 -m32" )
	SET( CMAKE_FIND_LIBRARY_SUFFIXES ".a" )
	SET( CMAKE_SHARED_LINKER_FLAGS "-shared -static-libgcc -static-libstdc++" )
else()
	SET( CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od /RTC1 /MP /EHsc" )
	SET( CMAKE_CXX_FLAGS_RELEASE "/MT /Zi /O2 /Ob1 /EHsc /MP" ) #with debug info
    SET( CMAKE_C_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od /RTC1 /MP /EHsc" )
	SET( CMAKE_C_FLAGS_RELEASE "/MT /Zi /O2 /Ob1 /EHsc /MP" ) #with debug info
	SET( CMAKE_SHARED_LINKER_FLAGS_RELEASE "/OPT:REF /DEBUG:FULL" )
endif()